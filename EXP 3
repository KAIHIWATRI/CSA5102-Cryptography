#include <stdio.h>
#include <string.h>
#include <ctype.h>

char matrix[5][5];

void generateMatrix(char key[]) {
    int used[26] = {0};
    int row = 0, col = 0;
    for (int i = 0; key[i] != '\0'; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (ch < 'A' || ch > 'Z' || used[ch - 'A']) continue;
        matrix[row][col++] = ch;
        used[ch - 'A'] = 1;
        if (col == 5) { row++; col = 0; }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue;
        if (!used[ch - 'A']) {
            matrix[row][col++] = ch;
            used[ch - 'A'] = 1;
            if (col == 5) { row++; col = 0; }
        }
    }
}

void findPosition(char ch, int *r, int *c) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (matrix[i][j] == ch) { *r = i; *c = j; return; }
}

void playfairEncrypt(char text[]) {
    int len = strlen(text);
    for (int i = 0; i < len; i += 2) {
        char a = toupper(text[i]);
        char b = (i+1 < len) ? toupper(text[i+1]) : 'X';
        if (a == b) b = 'X';

        int r1, c1, r2, c2;
        findPosition(a, &r1, &c1);
        findPosition(b, &r2, &c2);

        if (r1 == r2) {
            text[i] = matrix[r1][(c1+1)%5];
            text[i+1] = matrix[r2][(c2+1)%5];
        } else if (c1 == c2) {
            text[i] = matrix[(r1+1)%5][c1];
            text[i+1] = matrix[(r2+1)%5][c2];
        } else {
            text[i] = matrix[r1][c2];
            text[i+1] = matrix[r2][c1];
        }
    }
}

int main() {
    char text[100], key[26];

    printf("Enter text to encrypt: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0; // Remove newline

    printf("Enter keyword: ");
    scanf("%s", key);

    generateMatrix(key);
    playfairEncrypt(text);
    printf("Encrypted text: %s\n", text);

    return 0;
}
